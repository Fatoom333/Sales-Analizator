namespace Sales;

using System;
using System.Collections.Generic;
using System.Linq;
using GetUserInput;
using Spectre.Console;
using System.Globalization;

/// <summary>
/// –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
/// </summary>
public class TableHandler
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥–∞–∂, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    /// </summary>
    private readonly SalesManager salesManager;

    /// <summary>
    /// –ë–∞–∑–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    /// </summary>
    private readonly string[] baseColumnNames =
    {
        "[bold]Transaction ID[/]",
        "[bold]Date[/]",
        "[bold]Product ID[/]",
        "[bold]Name[/]",
        "[bold]Amount[/]",
        "[bold]Price[/]",
        "[bold]Total[/]",
        "[bold]Region[/]"
    };

    /// <summary>
    /// –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    /// </summary>
    private readonly string[] regionColomNames =
    {
        "[bold]Region[/]",
        "[bold]Average[/]"
    };

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TableHandler —Å –∑–∞–¥–∞–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–¥–∞–∂
    /// </summary>
    /// <param name="salesManager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</param>
    public TableHandler(SalesManager salesManager)
    {
        this.salesManager = salesManager;
    }

    /// <summary>
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞—á–∏ —Å—Ç—Ä–æ–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    /// </summary>
    /// <param name="rows">–°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)</param>
    /// <param name="columnNames">–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)</param>
    public void DisplayAsTable(List<string[]>? rows = null, string[] columnNames = null)
    {
        if (rows is null)
        {
            rows = new List<string[]>();
            foreach (var sale in salesManager.Sales)
            {
                rows.Add(sale.GetAllFieldsValues());
            }
        }

        if (columnNames is null) columnNames = baseColumnNames;

        var table = new Table();

        foreach (var column in columnNames) table.AddColumn(column);

        foreach (var row in rows)
        {
            table.AddRow(row);
        }

        table.Expand();
        table.Border(TableBorder.Rounded);
        table.Title("üõí [yellow]Sales Transactions[/]");
        table.Alignment(Justify.Center);

        AnsiConsole.Write(table);
    }

    /// <summary>
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è
    /// </summary>
    public void DisplayFilteredTable()
    {
        string[] filedNames = salesManager.Sales.First().GetAllFieldsNames();
        string fieldToFilter = GetUserInput.GetUserStringInput(input => filedNames.Contains(input),
            $"–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:\n{string.Join(", ", filedNames)}");
        string criteriaStringInput = GetUserInput.GetUserStringInput(input =>
            {
                var propertyType = typeof(Sale).GetProperty(fieldToFilter)?.PropertyType;
                SalesManager.TryConvertToType(input, propertyType, out bool success);
                return propertyType is not null && success;
            },
            $"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—é {fieldToFilter}:");

        Console.Clear();
        DisplayAsTable(salesManager.FilterSales(fieldToFilter, criteriaStringInput));
    }

    /// <summary>
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    /// </summary>
    public void DisplaySortedTable()
    {
        string choice = GetUserInput.GetUserStringInput(
            input => input == "1" || input == "2",
            "1. –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\n2. –ü–æ —É–±—ã–≤–∞–Ω–∏—é");

        switch (choice)
        {
            case "1":
                List<string[]> sortedSalesAsc = salesManager.Sales
                    .OrderBy(sale => sale.TransactionID)
                    .Select(sale => sale.GetAllFieldsValues())
                    .ToList();
                Console.Clear();
                DisplayAsTable(sortedSalesAsc);
                break;
            case "2":
                List<string[]> sortedSalesDesc = salesManager.Sales
                    .OrderByDescending(sale => sale.TransactionID)
                    .Select(sale => sale.GetAllFieldsValues())
                    .ToList();
                Console.Clear();
                DisplayAsTable(sortedSalesDesc);
                break;
        }
    }

    /// <summary>
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
    /// </summary>
    public void DisplayGroupedByRegionTable()
    {
        List<List<Sale>> groupedSales = salesManager.GroupSalesByRegion();
        List<double> averageSales = new List<double>();

        foreach (var sales in groupedSales)
        {
            double sumTotals = 0.0;
            int count = 0;

            foreach (var sale in sales)
            {
                sumTotals += sale.TotalByCurrency["RUB"];
                count++;
            }

            averageSales.Add(sumTotals / count);
        }

        DisplayAsTable(ConvertGroupedSalesToStringArray(groupedSales, averageSales), regionColomNames);
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
    /// </summary>
    /// <param name="groupedSales">–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—Ä–æ–¥–∞–∂, –∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ Sale</param>
    /// <param name="averageSales">–°–ø–∏—Å–æ–∫ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã</param>
    /// <returns>–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</returns>
    private List<string[]> ConvertGroupedSalesToStringArray(List<List<Sale>> groupedSales, List<double> averageSales)
    {
        List<string[]> formattedData = new List<string[]>();

        for (int i = 0; i < groupedSales.Count; i++)
        {
            formattedData.Add(new string[]
            {
                groupedSales[i].First().Region,
                averageSales[i].ToString("F2")
            });

            formattedData.Add(new string[] { "", "" });
        }

        return formattedData;
    }
}