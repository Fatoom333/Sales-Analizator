Боженко Станислав 247-1
Вариант 2
B-side

AI using:
Большиство комментариев было создано с помощью ии, а далее отредактирован
(promt: Прокоментируй этот код)
Метод GetHashCode() в классе Sale
(promt: создай GetHashCode для override Equals этого класса)
Формат входных данных - .json
Структура файла:

{
  "sales": [
    {
      "transactionID": 9-ти значное целое неотрицательное число,
      "date": Строка даты формата DD.MM.YYYY,
      "productID": 9-ти значное целое неотрицательное число,
      "name": Произвольная строка,
      "amount": Целое неотрицательное число,
      "price": Словарь с ключом - валюта, а значение - price в этой валюте,
      "total": Словарь с ключом - валюта, а значение - price в этой валюте * количество товара,
      "region": Произвольная строка
    }
  ]
}


Схема меню:

Главное меню
├─ 1. Ввести адрес файла
├─ 2. Работа с транзакциями
│  ├─ 1. Просмотр всех транзакций
│  ├─ 2. Добавление новой транзакции
│  ├─ 3. Удаление транзакции
│  ├─ 4. Редактировать транзакцию
│  └─ 0. Назад
├─ 3. Продвинутое меню
│  ├─ 1. Визуализация таблицей
│  ├─ 2. Визуализация отсортированной таблицы
│  ├─ 3. Визуализация отфильтрованной таблицы
│  ├─ 4. Визуализация сгруппированных регионов в виде таблицы
│  ├─ 5. Визуализация гистограммы за выбранный период
│  ├─ 6. Визуализация Breakdown Chart за выбранный период
│  └─ 0. Назад
└─ 0. Выход

Описание структуры проекта:

Project_4
├─ CbrApi
│  ├─ CbrApiClient.cs
│  └─ ICbrApiClient.cs
├─ ConsoleMenu
│  ├─ AdvancedMenu.cs
│  ├─ IMenu.cs
│  ├─ MainMenu.cs
│  └─ TransactionMenu.cs
├─ ExceptionHandler
│  ├─ ConsoleExceptionHandler.cs
│  ├─ FileExceptionHandler.cs
│  ├─ GetCurrencyRateException.cs
│  ├─ HttpExceptionHandler.cs
│  └─ IExceptionHandler.cs
├─ FileManager
│  ├─ FileManager.cs
│  └─ FileExceptionHandler.cs
├─ GetUserInput
│  └─ GetUserInput.cs
├─ Sales
│  ├─ ChartRender.cs
│  ├─ DateTimeConvertor.cs
│  ├─ ISalesManager.cs
│  ├─ Sales.cs
│  ├─ SalesManager.cs
│  ├─ TableManager.cs
│  └─ sales.json
└─ Sales_Analizator
   └─ Program.cs

1. CbrApi
	Модуль, отвечающий за взаимодействие с API Центробанка (ЦБ РФ) или другим источником курсов валют
	• ICbrApiClient — интерфейс, описывающий методы получения данных
	• CbrApiClient — реализация этого интерфейса
2. ConsoleMenu
	Модуль, отвечающий за вывод меню в консоль и взаимодействия с пользователем
	• IMenu — интерфейс для общих методов меню (отображение и обработка пунктов)
	• MainMenu — главное меню программы
	• TransactionMenu — меню для работы с транзакциями (просмотр, добавление, удаление и т.д.)
	• AdvancedMenu — расширенное меню (таблицы и charts)
3. ExceptionHandler
	Модуль, отвечающий за централизованную обработку исключений и определение собственных типов ошибок
	• IExceptionHandler — интерфейс для единообразного подхода к обработке ошибок
	• ConsoleExceptionHandler — класс для обработки ошибок, связанных с консольным вводом/выводом
	• FileExceptionHandler — класс для обработки исключений, возникающих при работе с файлами
	• HttpExceptionHandler — класс для обработки исключений, связанных с сетевыми запросами
	• GetCurrencyRateException — класс-исключение, описывающее ошибку при получении курса валют
4. FileManager
	Модуль, содержащий логику чтения/записи и валидации файлов.
	• IFileManager — Интерфейс для описания стандартных операций по работе с файлами
	• FileManager — класс для работы с файлами (чтение, запись)
5. GetUserInput
	Модуль, отвечающий за сбор и валидацию пользовательского ввода из консоли
	• GetUserInput — класс/методы для получения данных от пользователя (парсинг, проверка форматов)
6. Sales
	Модуль, связанный с сущностью «Продажи»
	• ISalesManager — интерфейс для управления операциями над продажами (добавление, удаление, обновление и др.)
	• SalesManager — реализация ISalesManager, обеспечивающая CRUD-операции и другие с данными о продажах
	• Sales — структура, описывающиая сущность «Продажи»
	• DateTimeConvertor — утилита для преобразования и форматирования дат
	• ChartRender — класс для отрисовки графиков и гистограмм, связанных с данными о продажах
	• TableManager — генерация и обработка табличного представления (сортировка, группировка, фильтрация)
	• sales.json — файл с тестовыми данными о продажах (JSON-формат)
7. Sales_Analizator
	Основной исполняемый файл, который запускается для работы с приложением
	• Program.cs — точка входа приложения, где инициализируются основные сервисы и запускается работа программы